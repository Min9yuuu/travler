generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  avatar String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post Post[]
  comment Comment[]
  likes Like[]
  chat_rooms ChatRoom[]
  messages Message[]
}

model Post {
  id Int @id @default(autoincrement())
  photo String
  title String
  content String 
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields:[userId],references: [id],onDelete: Cascade)
  userId Int
  comments Comment[]
  likes Like[]
}

model Comment{
  id Int @id @default(autoincrement())
  comment String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields:[userId],references: [id],onDelete: Cascade)
  post Post @relation(fields:[postId],references: [id],onDelete: Cascade)
  userId Int
  postId Int
}

model Like{
  @@id(name:"id",[userId,postId])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields:[userId],references: [id],onDelete: Cascade)
  post Post @relation(fields:[postId],references: [id],onDelete: Cascade)
  userId Int
  postId Int
}

model ChatRoom {
  id String @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users User[]
  messages Message[]
}

model Message{
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room ChatRoom @relation(fields:[chatRoomId],references: [id])
  user User @relation(fields:[userId],references:[id])
  chatRoomId String
  userId Int
}